# Generated from g4/YAPL.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,52,331,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
        1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,
        1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,5,16,190,8,16,10,16,
        12,16,193,9,16,1,16,3,16,196,8,16,1,17,1,17,5,17,200,8,17,10,17,
        12,17,203,9,17,1,17,3,17,206,8,17,1,18,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,
        1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,
        1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,
        1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,
        1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,
        1,44,1,45,1,45,1,45,1,46,1,46,1,46,5,46,286,8,46,10,46,12,46,289,
        9,46,1,46,1,46,1,47,1,47,1,47,1,48,4,48,297,8,48,11,48,12,48,298,
        1,49,4,49,302,8,49,11,49,12,49,303,1,49,1,49,1,50,1,50,1,50,1,50,
        5,50,312,8,50,10,50,12,50,315,9,50,1,50,1,50,1,50,1,50,1,51,1,51,
        3,51,323,8,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,313,0,53,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
        95,0,97,48,99,49,101,50,103,51,105,52,1,0,24,2,0,67,67,99,99,2,0,
        76,76,108,108,2,0,65,65,97,97,2,0,83,83,115,115,2,0,69,69,101,101,
        2,0,70,70,102,102,2,0,73,73,105,105,2,0,78,78,110,110,2,0,84,84,
        116,116,2,0,72,72,104,104,2,0,82,82,114,114,2,0,86,86,118,118,2,
        0,79,79,111,111,2,0,68,68,100,100,2,0,80,80,112,112,2,0,87,87,119,
        119,1,0,65,90,4,0,48,57,65,90,95,95,97,122,1,0,97,122,4,0,10,10,
        13,13,34,34,92,92,8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,
        114,116,116,1,0,48,57,2,0,9,13,32,32,2,0,10,10,12,13,339,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
        0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,
        0,93,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,
        0,0,105,1,0,0,0,1,107,1,0,0,0,3,113,1,0,0,0,5,118,1,0,0,0,7,121,
        1,0,0,0,9,124,1,0,0,0,11,127,1,0,0,0,13,131,1,0,0,0,15,140,1,0,0,
        0,17,147,1,0,0,0,19,152,1,0,0,0,21,157,1,0,0,0,23,162,1,0,0,0,25,
        168,1,0,0,0,27,172,1,0,0,0,29,176,1,0,0,0,31,181,1,0,0,0,33,195,
        1,0,0,0,35,205,1,0,0,0,37,207,1,0,0,0,39,212,1,0,0,0,41,222,1,0,
        0,0,43,224,1,0,0,0,45,226,1,0,0,0,47,228,1,0,0,0,49,230,1,0,0,0,
        51,232,1,0,0,0,53,234,1,0,0,0,55,236,1,0,0,0,57,238,1,0,0,0,59,240,
        1,0,0,0,61,242,1,0,0,0,63,244,1,0,0,0,65,246,1,0,0,0,67,248,1,0,
        0,0,69,250,1,0,0,0,71,252,1,0,0,0,73,254,1,0,0,0,75,257,1,0,0,0,
        77,259,1,0,0,0,79,261,1,0,0,0,81,264,1,0,0,0,83,267,1,0,0,0,85,270,
        1,0,0,0,87,273,1,0,0,0,89,276,1,0,0,0,91,279,1,0,0,0,93,282,1,0,
        0,0,95,292,1,0,0,0,97,296,1,0,0,0,99,301,1,0,0,0,101,307,1,0,0,0,
        103,320,1,0,0,0,105,329,1,0,0,0,107,108,7,0,0,0,108,109,7,1,0,0,
        109,110,7,2,0,0,110,111,7,3,0,0,111,112,7,3,0,0,112,2,1,0,0,0,113,
        114,7,4,0,0,114,115,7,1,0,0,115,116,7,3,0,0,116,117,7,4,0,0,117,
        4,1,0,0,0,118,119,7,5,0,0,119,120,7,6,0,0,120,6,1,0,0,0,121,122,
        7,6,0,0,122,123,7,5,0,0,123,8,1,0,0,0,124,125,7,6,0,0,125,126,7,
        7,0,0,126,10,1,0,0,0,127,128,7,1,0,0,128,129,7,4,0,0,129,130,7,8,
        0,0,130,12,1,0,0,0,131,132,7,6,0,0,132,133,7,7,0,0,133,134,7,9,0,
        0,134,135,7,4,0,0,135,136,7,10,0,0,136,137,7,6,0,0,137,138,7,8,0,
        0,138,139,7,3,0,0,139,14,1,0,0,0,140,141,7,6,0,0,141,142,7,3,0,0,
        142,143,7,11,0,0,143,144,7,12,0,0,144,145,7,6,0,0,145,146,7,13,0,
        0,146,16,1,0,0,0,147,148,7,1,0,0,148,149,7,12,0,0,149,150,7,12,0,
        0,150,151,7,14,0,0,151,18,1,0,0,0,152,153,7,14,0,0,153,154,7,12,
        0,0,154,155,7,12,0,0,155,156,7,1,0,0,156,20,1,0,0,0,157,158,7,8,
        0,0,158,159,7,9,0,0,159,160,7,4,0,0,160,161,7,7,0,0,161,22,1,0,0,
        0,162,163,7,15,0,0,163,164,7,9,0,0,164,165,7,6,0,0,165,166,7,1,0,
        0,166,167,7,4,0,0,167,24,1,0,0,0,168,169,7,7,0,0,169,170,7,4,0,0,
        170,171,7,15,0,0,171,26,1,0,0,0,172,173,7,7,0,0,173,174,7,12,0,0,
        174,175,7,8,0,0,175,28,1,0,0,0,176,177,5,116,0,0,177,178,5,114,0,
        0,178,179,5,117,0,0,179,180,5,101,0,0,180,30,1,0,0,0,181,182,5,102,
        0,0,182,183,5,97,0,0,183,184,5,108,0,0,184,185,5,115,0,0,185,186,
        5,101,0,0,186,32,1,0,0,0,187,191,7,16,0,0,188,190,7,17,0,0,189,188,
        1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,196,
        1,0,0,0,193,191,1,0,0,0,194,196,3,39,19,0,195,187,1,0,0,0,195,194,
        1,0,0,0,196,34,1,0,0,0,197,201,7,18,0,0,198,200,7,17,0,0,199,198,
        1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,206,
        1,0,0,0,203,201,1,0,0,0,204,206,3,37,18,0,205,197,1,0,0,0,205,204,
        1,0,0,0,206,36,1,0,0,0,207,208,5,115,0,0,208,209,5,101,0,0,209,210,
        5,108,0,0,210,211,5,102,0,0,211,38,1,0,0,0,212,213,5,83,0,0,213,
        214,5,69,0,0,214,215,5,76,0,0,215,216,5,70,0,0,216,217,5,95,0,0,
        217,218,5,84,0,0,218,219,5,89,0,0,219,220,5,80,0,0,220,221,5,69,
        0,0,221,40,1,0,0,0,222,223,5,40,0,0,223,42,1,0,0,0,224,225,5,41,
        0,0,225,44,1,0,0,0,226,227,5,123,0,0,227,46,1,0,0,0,228,229,5,125,
        0,0,229,48,1,0,0,0,230,231,5,91,0,0,231,50,1,0,0,0,232,233,5,93,
        0,0,233,52,1,0,0,0,234,235,5,58,0,0,235,54,1,0,0,0,236,237,5,59,
        0,0,237,56,1,0,0,0,238,239,5,44,0,0,239,58,1,0,0,0,240,241,5,46,
        0,0,241,60,1,0,0,0,242,243,5,126,0,0,243,62,1,0,0,0,244,245,5,64,
        0,0,245,64,1,0,0,0,246,247,5,42,0,0,247,66,1,0,0,0,248,249,5,47,
        0,0,249,68,1,0,0,0,250,251,5,43,0,0,251,70,1,0,0,0,252,253,5,45,
        0,0,253,72,1,0,0,0,254,255,5,60,0,0,255,256,5,61,0,0,256,74,1,0,
        0,0,257,258,5,60,0,0,258,76,1,0,0,0,259,260,5,61,0,0,260,78,1,0,
        0,0,261,262,5,43,0,0,262,263,5,43,0,0,263,80,1,0,0,0,264,265,5,45,
        0,0,265,266,5,45,0,0,266,82,1,0,0,0,267,268,5,61,0,0,268,269,5,42,
        0,0,269,84,1,0,0,0,270,271,5,61,0,0,271,272,5,47,0,0,272,86,1,0,
        0,0,273,274,5,61,0,0,274,275,5,43,0,0,275,88,1,0,0,0,276,277,5,61,
        0,0,277,278,5,45,0,0,278,90,1,0,0,0,279,280,5,60,0,0,280,281,5,45,
        0,0,281,92,1,0,0,0,282,287,5,34,0,0,283,286,3,95,47,0,284,286,8,
        19,0,0,285,283,1,0,0,0,285,284,1,0,0,0,286,289,1,0,0,0,287,285,1,
        0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,291,5,
        34,0,0,291,94,1,0,0,0,292,293,5,92,0,0,293,294,7,20,0,0,294,96,1,
        0,0,0,295,297,7,21,0,0,296,295,1,0,0,0,297,298,1,0,0,0,298,296,1,
        0,0,0,298,299,1,0,0,0,299,98,1,0,0,0,300,302,7,22,0,0,301,300,1,
        0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,305,1,
        0,0,0,305,306,6,49,0,0,306,100,1,0,0,0,307,308,5,45,0,0,308,309,
        5,45,0,0,309,313,1,0,0,0,310,312,9,0,0,0,311,310,1,0,0,0,312,315,
        1,0,0,0,313,314,1,0,0,0,313,311,1,0,0,0,314,316,1,0,0,0,315,313,
        1,0,0,0,316,317,7,23,0,0,317,318,1,0,0,0,318,319,6,50,0,0,319,102,
        1,0,0,0,320,322,5,40,0,0,321,323,9,0,0,0,322,321,1,0,0,0,322,323,
        1,0,0,0,323,324,1,0,0,0,324,325,5,42,0,0,325,326,5,41,0,0,326,327,
        1,0,0,0,327,328,6,51,0,0,328,104,1,0,0,0,329,330,9,0,0,0,330,106,
        1,0,0,0,11,0,191,195,201,205,285,287,298,303,313,322,1,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CLASS = 1
    ELSE = 2
    FI = 3
    IF = 4
    IN = 5
    LET = 6
    INHERITS = 7
    ISVOID = 8
    LOOP = 9
    POOL = 10
    THEN = 11
    WHILE = 12
    NEW = 13
    NOT = 14
    TRUE = 15
    FALSE = 16
    TYPE_ID = 17
    OBJECT_ID = 18
    SELF = 19
    SELF_TYPE = 20
    LPAREN = 21
    RPAREN = 22
    LBRACE = 23
    RBRACE = 24
    LBRACKET = 25
    RBRACKET = 26
    COLON = 27
    SEMICOLON = 28
    COMMA = 29
    DOT = 30
    NEG = 31
    AT = 32
    MULT = 33
    DIV = 34
    PLUS = 35
    MINUS = 36
    LE = 37
    LT = 38
    EQ = 39
    INCR = 40
    DECR = 41
    ASSIGN_MULT = 42
    ASSIGN_DIV = 43
    ASSIGN_PLUS = 44
    ASSIGN_MINUS = 45
    ASSIGN = 46
    STRING = 47
    INT = 48
    WHITESPACE = 49
    COMMENT = 50
    COMMENT_BLOCK = 51
    ERROR = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'self'", "'SELF_TYPE'", "'('", "')'", 
            "'{'", "'}'", "'['", "']'", "':'", "';'", "','", "'.'", "'~'", 
            "'@'", "'*'", "'/'", "'+'", "'-'", "'<='", "'<'", "'='", "'++'", 
            "'--'", "'=*'", "'=/'", "'=+'", "'=-'", "'<-'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "ELSE", "FI", "IF", "IN", "LET", "INHERITS", "ISVOID", 
            "LOOP", "POOL", "THEN", "WHILE", "NEW", "NOT", "TRUE", "FALSE", 
            "TYPE_ID", "OBJECT_ID", "SELF", "SELF_TYPE", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COLON", "SEMICOLON", 
            "COMMA", "DOT", "NEG", "AT", "MULT", "DIV", "PLUS", "MINUS", 
            "LE", "LT", "EQ", "INCR", "DECR", "ASSIGN_MULT", "ASSIGN_DIV", 
            "ASSIGN_PLUS", "ASSIGN_MINUS", "ASSIGN", "STRING", "INT", "WHITESPACE", 
            "COMMENT", "COMMENT_BLOCK", "ERROR" ]

    ruleNames = [ "CLASS", "ELSE", "FI", "IF", "IN", "LET", "INHERITS", 
                  "ISVOID", "LOOP", "POOL", "THEN", "WHILE", "NEW", "NOT", 
                  "TRUE", "FALSE", "TYPE_ID", "OBJECT_ID", "SELF", "SELF_TYPE", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", 
                  "COLON", "SEMICOLON", "COMMA", "DOT", "NEG", "AT", "MULT", 
                  "DIV", "PLUS", "MINUS", "LE", "LT", "EQ", "INCR", "DECR", 
                  "ASSIGN_MULT", "ASSIGN_DIV", "ASSIGN_PLUS", "ASSIGN_MINUS", 
                  "ASSIGN", "STRING", "ESC_SEQ", "INT", "WHITESPACE", "COMMENT", 
                  "COMMENT_BLOCK", "ERROR" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


