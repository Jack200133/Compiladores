# Generated from YAPL.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,46,288,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
        2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
        14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
        18,4,18,182,8,18,11,18,12,18,183,1,19,1,19,5,19,188,8,19,10,19,12,
        19,191,9,19,1,20,1,20,5,20,195,8,20,10,20,12,20,198,9,20,1,21,1,
        21,1,21,1,21,1,21,1,21,1,22,1,22,5,22,208,8,22,10,22,12,22,211,9,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,
        29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,
        35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,
        41,1,42,1,42,1,43,4,43,268,8,43,11,43,12,43,269,1,43,1,43,1,44,1,
        44,1,44,1,44,5,44,278,8,44,10,44,12,44,281,9,44,1,44,1,44,1,44,1,
        44,1,45,1,45,0,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
        87,44,89,45,91,46,1,0,8,1,0,48,57,1,0,65,90,3,0,48,57,95,95,97,122,
        1,0,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,
        12,13,32,32,1,0,10,10,293,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,1,93,1,0,0,0,3,99,1,0,0,0,5,104,
        1,0,0,0,7,110,1,0,0,0,9,113,1,0,0,0,11,116,1,0,0,0,13,119,1,0,0,
        0,15,128,1,0,0,0,17,135,1,0,0,0,19,140,1,0,0,0,21,145,1,0,0,0,23,
        150,1,0,0,0,25,156,1,0,0,0,27,160,1,0,0,0,29,164,1,0,0,0,31,169,
        1,0,0,0,33,173,1,0,0,0,35,176,1,0,0,0,37,181,1,0,0,0,39,185,1,0,
        0,0,41,192,1,0,0,0,43,199,1,0,0,0,45,205,1,0,0,0,47,214,1,0,0,0,
        49,219,1,0,0,0,51,229,1,0,0,0,53,231,1,0,0,0,55,233,1,0,0,0,57,235,
        1,0,0,0,59,237,1,0,0,0,61,239,1,0,0,0,63,241,1,0,0,0,65,243,1,0,
        0,0,67,245,1,0,0,0,69,247,1,0,0,0,71,249,1,0,0,0,73,251,1,0,0,0,
        75,253,1,0,0,0,77,255,1,0,0,0,79,257,1,0,0,0,81,259,1,0,0,0,83,261,
        1,0,0,0,85,264,1,0,0,0,87,267,1,0,0,0,89,273,1,0,0,0,91,286,1,0,
        0,0,93,94,5,99,0,0,94,95,5,108,0,0,95,96,5,97,0,0,96,97,5,115,0,
        0,97,98,5,115,0,0,98,2,1,0,0,0,99,100,5,101,0,0,100,101,5,108,0,
        0,101,102,5,115,0,0,102,103,5,101,0,0,103,4,1,0,0,0,104,105,5,102,
        0,0,105,106,5,97,0,0,106,107,5,108,0,0,107,108,5,115,0,0,108,109,
        5,101,0,0,109,6,1,0,0,0,110,111,5,102,0,0,111,112,5,105,0,0,112,
        8,1,0,0,0,113,114,5,105,0,0,114,115,5,102,0,0,115,10,1,0,0,0,116,
        117,5,105,0,0,117,118,5,110,0,0,118,12,1,0,0,0,119,120,5,105,0,0,
        120,121,5,110,0,0,121,122,5,104,0,0,122,123,5,101,0,0,123,124,5,
        114,0,0,124,125,5,105,0,0,125,126,5,116,0,0,126,127,5,115,0,0,127,
        14,1,0,0,0,128,129,5,105,0,0,129,130,5,115,0,0,130,131,5,118,0,0,
        131,132,5,111,0,0,132,133,5,105,0,0,133,134,5,100,0,0,134,16,1,0,
        0,0,135,136,5,108,0,0,136,137,5,111,0,0,137,138,5,111,0,0,138,139,
        5,112,0,0,139,18,1,0,0,0,140,141,5,112,0,0,141,142,5,111,0,0,142,
        143,5,111,0,0,143,144,5,108,0,0,144,20,1,0,0,0,145,146,5,116,0,0,
        146,147,5,104,0,0,147,148,5,101,0,0,148,149,5,110,0,0,149,22,1,0,
        0,0,150,151,5,119,0,0,151,152,5,104,0,0,152,153,5,105,0,0,153,154,
        5,108,0,0,154,155,5,101,0,0,155,24,1,0,0,0,156,157,5,110,0,0,157,
        158,5,101,0,0,158,159,5,119,0,0,159,26,1,0,0,0,160,161,5,110,0,0,
        161,162,5,111,0,0,162,163,5,116,0,0,163,28,1,0,0,0,164,165,5,116,
        0,0,165,166,5,114,0,0,166,167,5,117,0,0,167,168,5,101,0,0,168,30,
        1,0,0,0,169,170,5,97,0,0,170,171,5,110,0,0,171,172,5,100,0,0,172,
        32,1,0,0,0,173,174,5,111,0,0,174,175,5,114,0,0,175,34,1,0,0,0,176,
        177,5,108,0,0,177,178,5,101,0,0,178,179,5,116,0,0,179,36,1,0,0,0,
        180,182,7,0,0,0,181,180,1,0,0,0,182,183,1,0,0,0,183,181,1,0,0,0,
        183,184,1,0,0,0,184,38,1,0,0,0,185,189,7,1,0,0,186,188,7,2,0,0,187,
        186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,
        40,1,0,0,0,191,189,1,0,0,0,192,196,7,3,0,0,193,195,7,4,0,0,194,193,
        1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,42,1,
        0,0,0,198,196,1,0,0,0,199,200,5,34,0,0,200,201,8,5,0,0,201,202,4,
        21,0,0,202,203,5,34,0,0,203,204,4,21,1,0,204,44,1,0,0,0,205,209,
        5,34,0,0,206,208,8,5,0,0,207,206,1,0,0,0,208,211,1,0,0,0,209,207,
        1,0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,213,
        5,34,0,0,213,46,1,0,0,0,214,215,5,115,0,0,215,216,5,101,0,0,216,
        217,5,108,0,0,217,218,5,102,0,0,218,48,1,0,0,0,219,220,5,83,0,0,
        220,221,5,69,0,0,221,222,5,76,0,0,222,223,5,70,0,0,223,224,5,95,
        0,0,224,225,5,84,0,0,225,226,5,89,0,0,226,227,5,80,0,0,227,228,5,
        69,0,0,228,50,1,0,0,0,229,230,5,43,0,0,230,52,1,0,0,0,231,232,5,
        45,0,0,232,54,1,0,0,0,233,234,5,42,0,0,234,56,1,0,0,0,235,236,5,
        58,0,0,236,58,1,0,0,0,237,238,5,47,0,0,238,60,1,0,0,0,239,240,5,
        61,0,0,240,62,1,0,0,0,241,242,5,40,0,0,242,64,1,0,0,0,243,244,5,
        41,0,0,244,66,1,0,0,0,245,246,5,123,0,0,246,68,1,0,0,0,247,248,5,
        125,0,0,248,70,1,0,0,0,249,250,5,59,0,0,250,72,1,0,0,0,251,252,5,
        44,0,0,252,74,1,0,0,0,253,254,5,60,0,0,254,76,1,0,0,0,255,256,5,
        62,0,0,256,78,1,0,0,0,257,258,5,64,0,0,258,80,1,0,0,0,259,260,5,
        46,0,0,260,82,1,0,0,0,261,262,5,60,0,0,262,263,5,45,0,0,263,84,1,
        0,0,0,264,265,5,126,0,0,265,86,1,0,0,0,266,268,7,6,0,0,267,266,1,
        0,0,0,268,269,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,271,1,
        0,0,0,271,272,6,43,0,0,272,88,1,0,0,0,273,274,5,45,0,0,274,275,5,
        45,0,0,275,279,1,0,0,0,276,278,8,7,0,0,277,276,1,0,0,0,278,281,1,
        0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,282,1,0,0,0,281,279,1,
        0,0,0,282,283,5,10,0,0,283,284,1,0,0,0,284,285,6,44,1,0,285,90,1,
        0,0,0,286,287,9,0,0,0,287,92,1,0,0,0,7,0,183,189,196,209,269,279,
        2,0,1,0,6,0,0
    ]

class YAPLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    CLASS = 1
    ELSE = 2
    FALSE = 3
    FI = 4
    IF = 5
    IN = 6
    INHERITS = 7
    ISVOID = 8
    LOOP = 9
    POOL = 10
    THEN = 11
    WHILE = 12
    NEW = 13
    NOT = 14
    TRUE = 15
    AND = 16
    OR = 17
    LET = 18
    INT = 19
    TYPE_ID = 20
    ID = 21
    STRING = 22
    INVALID_STRING = 23
    SELF = 24
    SELF_TYPE = 25
    PLUS = 26
    MINUS = 27
    MULT = 28
    DOBLE = 29
    DIV = 30
    EQ = 31
    LPAREN = 32
    RPAREN = 33
    LBRACE = 34
    RBRACE = 35
    SEMI = 36
    COMMA = 37
    LESS_THAN = 38
    GREATER_THAN = 39
    AT = 40
    DOT = 41
    LEFT_ARROW = 42
    TILDE = 43
    WS = 44
    COMMENT = 45
    ERROR = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'else'", "'false'", "'fi'", "'if'", "'in'", "'inherits'", 
            "'isvoid'", "'loop'", "'pool'", "'then'", "'while'", "'new'", 
            "'not'", "'true'", "'and'", "'or'", "'let'", "'self'", "'SELF_TYPE'", 
            "'+'", "'-'", "'*'", "':'", "'/'", "'='", "'('", "')'", "'{'", 
            "'}'", "';'", "','", "'<'", "'>'", "'@'", "'.'", "'<-'", "'~'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "ELSE", "FALSE", "FI", "IF", "IN", "INHERITS", "ISVOID", 
            "LOOP", "POOL", "THEN", "WHILE", "NEW", "NOT", "TRUE", "AND", 
            "OR", "LET", "INT", "TYPE_ID", "ID", "STRING", "INVALID_STRING", 
            "SELF", "SELF_TYPE", "PLUS", "MINUS", "MULT", "DOBLE", "DIV", 
            "EQ", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", "COMMA", 
            "LESS_THAN", "GREATER_THAN", "AT", "DOT", "LEFT_ARROW", "TILDE", 
            "WS", "COMMENT", "ERROR" ]

    ruleNames = [ "CLASS", "ELSE", "FALSE", "FI", "IF", "IN", "INHERITS", 
                  "ISVOID", "LOOP", "POOL", "THEN", "WHILE", "NEW", "NOT", 
                  "TRUE", "AND", "OR", "LET", "INT", "TYPE_ID", "ID", "STRING", 
                  "INVALID_STRING", "SELF", "SELF_TYPE", "PLUS", "MINUS", 
                  "MULT", "DOBLE", "DIV", "EQ", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "SEMI", "COMMA", "LESS_THAN", "GREATER_THAN", 
                  "AT", "DOT", "LEFT_ARROW", "TILDE", "WS", "COMMENT", "ERROR" ]

    grammarFileName = "YAPL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[21] = self.STRING_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def STRING_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return 0,255
         

            if predIndex == 1:
                return  getText().length() <= 257 
         


