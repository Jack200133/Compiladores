.data
vt_Main
	.word Main.print_name
	.word Main.print_name2
	.word Main.main

.text

main:
	jal CLASS_Main
# ======== FUNCIONES BASICAS ========
out_int:
	li $v0, 1
	syscall
	jr $ra

out_string:
	li $v0, 4
	syscall
	jr $ra

in_int:
	li $v0, 5
	syscall
	jr $ra

in_string:
	li $v0, 8
	syscall
	jr $ra

# ======== CODIGO ========
CLASS_Main:

# ======== RESERVA DE MEMORIA para CLASS_Main ========
	li $a0, 20
	li $v0, 9
	syscall
	move $t8, $v0
# ======== RESERVA DE 5 BYTES EN HEAP ========
	li $t7, 5
	move $a0, $t7
	li $v0, 9
	syscall
	move $t7, $v0
# ======== ALMACENAR CADENA EN HEAP ========
	li $t6, 77
	sb $t6, 0($t7)
	li $t6, 97
	sb $t6, 1($t7)
	li $t6, 105
	sb $t6, 2($t7)
	li $t6, 110
	sb $t6, 3($t7)
	sb $zero, 4($t7)

	sw $t7, 0($t8)
	la $t0 vt_Main
	sw $t0, 4($t8)
	move $s7, $t8
# ======== sp_GLOBAL[index] = value ========
# ======== RESERVA DE 9 BYTES EN HEAP ========
	li $t8, 9
	move $a0, $t8
	li $v0, 9
	syscall
	move $t8, $v0
# ======== ALMACENAR CADENA EN HEAP ========
	li $t7, 83
	sb $t7, 0($t8)
	li $t7, 116
	sb $t7, 1($t8)
	li $t7, 101
	sb $t7, 2($t8)
	li $t7, 102
	sb $t7, 3($t8)
	li $t7, 97
	sb $t7, 4($t8)
	li $t7, 110
	sb $t7, 5($t8)
	li $t7, 111
	sb $t7, 6($t8)
	li $t7, 10
	sb $t7, 7($t8)
	sb $zero, 8($t8)

	sw $t8, 8($s7)
# ======== sp_GLOBAL[index] = value ========
# ======== RESERVA DE 2 BYTES EN HEAP ========
	li $t8, 2
	move $a0, $t8
	li $v0, 9
	syscall
	move $t8, $v0
# ======== ALMACENAR CADENA EN HEAP ========
	li $t7, 10
	sb $t7, 0($t8)
	sb $zero, 1($t8)

	sw $t8, 12($s7)
# ======== sp_GLOBAL[index] = value ========

Main.print_name:
	move $s1, $a0
# ======== INICIALIZAR DE MEMORIA FUNCION Main.print_name ========
	addi $sp, $sp, -8
	sw $fp, 0($sp)
	sw $ra, 4($sp)
	move $fp, $sp
	addi $sp, $sp, -4
	sw $s1, 0($sp)
# ======== CALL out_string ========
	lw $s2, 0($sp)
	move $s1, $s2
	
	jal out_string
# ======== FIN FUNCION Main.print_name ========
	move $sp, $fp
	lw $ra, 4($sp)
	lw $fp, 0($sp)
	addi $sp, $sp, 8
	jr $ra

Main.print_name2:
	move $s1, $a0
# ======== INICIALIZAR DE MEMORIA FUNCION Main.print_name2 ========
	addi $sp, $sp, -8
	sw $fp, 0($sp)
	sw $ra, 4($sp)
	move $fp, $sp
	addi $sp, $sp, -8
	sw $s1, 0($sp)
# ======== sp[index] = PARAM_X ========
	sw $a1, 4($sp)

# ======== PARAM = sp[index] ========
	lw $a1, 4($sp)

# ======== CALL out_string ========
	lw $s2, 0($sp)
	move $s1, $s2
	
	jal out_string
# ======== FIN FUNCION Main.print_name2 ========
	move $sp, $fp
	lw $ra, 4($sp)
	lw $fp, 0($sp)
	addi $sp, $sp, 8
	jr $ra

Main.main:
	move $s1, $a0
# ======== INICIALIZAR DE MEMORIA FUNCION Main.main ========
	addi $sp, $sp, -8
	sw $fp, 0($sp)
	sw $ra, 4($sp)
	move $fp, $sp
	addi $sp, $sp, -12
	sw $s1, 0($sp)
	li $t0, sp[4]
	li $t1, sp[4]
	add $s0, $t0, $t1
# ======== PARAM = sp[index] ========
	lw $a1, 4($sp)

# ======== CALL out_string ========
	lw $s2, 0($sp)
	move $s1, $s2
	
	jal out_string
# ======== CALL print_name ========
	jal print_name
	move $t0 , $v0
# ======== CALL out_string ========
	lw $s2, 0($sp)
	move $s1, $s2
	
	jal out_string
# ======== CALL out_string ========
	lw $s2, 0($sp)
	move $s1, $s2
	
	jal out_string
# ======== FIN FUNCION Main.main ========
	move $sp, $fp
	lw $ra, 4($sp)
	lw $fp, 0($sp)
	addi $sp, $sp, 8
	jr $ra

# ======== Salida del Programa ========
	li $v0, 10
	syscall

